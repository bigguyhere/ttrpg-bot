import { CacheType, ChatInputCommandInteraction, CommandInteractionOptionResolver } from "discord.js"
import { Connection } from "mysql"
import { ActiveGame } from "../models/activegame"
import { Character } from "../models/character"

export abstract class CustomInterpreter{
    /**
     * @param gamedb - Database connection where game data resides
     * @param tableNameBase - Prefix for all table names 
     */
    constructor (protected gamedb : Connection, protected tableNameBase: string){
            this.gamedb = gamedb
            this.tableNameBase
    }

    /**
     * Changes the current base table-name
     * @param newNameBase - New base table-name value
     */
    changeTableNameBase(newNameBase : string){
        this.tableNameBase = newNameBase
    }

    /**
     * Method to be overidden if there is a custom character type
     * @param char_name - Name of character to be retrieved
     * @returns Character with char_name if successful, null if character cannot be found
     */
    async getCharacter(char_name: string): Promise<Character | null>{
        return await Character.getCharacter(this.gamedb, this.tableNameBase, char_name)
    }

    /**
     * Used to create SQL Tables associated with custom
     */
    abstract initializeTables(): void

    /**
     * Used to interpret custom commands
     * @param commandName - Name of the command entered by the user
     * @param options - Options entered by the user
     * @param activeGame - Currently active game
     * @param interaction - Slash command generated by the user
     * @returns - String that will be replied to the user's slash command
     */
    abstract interpret(
            commandName: string,
            options: Omit<CommandInteractionOptionResolver<CacheType>, "getMessage" | "getFocused">,
            activeGame: ActiveGame | null,
            interaction: ChatInputCommandInteraction<CacheType>) : Promise<string> 
}